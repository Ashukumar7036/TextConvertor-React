{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","about","toggleMode","htmlFor","TextForm","text","setText","heading","value","rows","onChange","event","target","newText","toUpperCase","showAlert","split","join","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","alert","role","word","lower","toLowerCase","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c57f3f3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  // Initial mystyle state- To change values use setMyStyle\r\n  const [myStyle, setMyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n  //   Using state to set the text of button component\r\n  const [btnText, setBtnText] = useState(\"Enable Dark mode\");\r\n\r\n  const toggleMode = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setMyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: \"1px solid white\",\r\n      });\r\n      setBtnText(\"Enable Light mode\");\r\n    } else {\r\n      setMyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setBtnText(\"Enable Dark mode\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h2 className=\"my-2\">About Us</h2>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        <button className=\"btn btn-primary my-3\" onClick={toggleMode}>\r\n          {btnText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        //   use symbol (``) to convert a classname into formattable string\r\n        // {}  braces are used so to add java script\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {/* Using props to get value from app.js  */}\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.mode === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable {props.mode === \"dark\" ? \"light\" : \"dark\"} mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\n// proptypes shows that the value should be of specified type but not other\r\nNavbar.propTypes = {\r\n  // this means title can only be of datatype string no Int,float and others\r\n  //   isRequired means that value should be present, else it throws error\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  // if any value is not passed into props then default props values are passed to it\r\n  title: \"Title here\",\r\n  about: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleClick = () => {\r\n    // console.log(\"Button Clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Changed into Uppercase\", \"success\");\r\n  };\r\n  // onChange event is called so that we can type in the text box and see changes\r\n  const handleChange = (event) => {\r\n    // console.log(\"Change applied\");\r\n    // event.target.value is used so to take user input and set text based on that\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces terminated\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n  };\r\n  // Using state component in function based method\r\n  const [text, setText] = useState(\"\");\r\n  //   setText(\"Text here\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            onChange={handleChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#070a1c\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-success mx-1\" onClick={handleClick}>\r\n          Convert to upper text\r\n        </button>\r\n        <button className=\"btn btn-success mx-1\" onClick={handleSpace}>\r\n          Remove Extra spaces\r\n        </button>\r\n        <button className=\"btn btn-success mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Summary</h2>\r\n        <p>Words Count : {text.split(\" \").length} </p>\r\n        <p>Letters Count: {text.length} </p>\r\n        <p>Time taken to read per minute: {0.008 * text.split(\" \").length} </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter the text to preview here\"} </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#070a1c\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextConvertor\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text here\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}